{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "from tkinter import *\n",
    "\n",
    "ws = Tk()\n",
    "ws.title('PythonGuides')\n",
    "ws.geometry('200x200')\n",
    "\n",
    "Button(ws, text='Smash Me!', height=10, width=20).pack(pady=10)\n",
    "\n",
    "ws.mainloop()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "from tkinter import *\n",
    "\n",
    "ws = Tk()\n",
    "ws.title('PythonGuides')\n",
    "ws.geometry('1024x768')   \n",
    "\n",
    "dwnd = PhotoImage(file='d.png')\n",
    "Button(ws, image=dwnd, command=None).pack(pady=10)\n",
    "\n",
    "ws.mainloop()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "from tkinter import *\n",
    "\n",
    "ws = Tk()\n",
    "ws.title(\"Border\")\n",
    "ws.geometry(\"800x600\")\n",
    "\n",
    "Button(ws, text=\"Height & width\", height=5, width=10).pack()\n",
    "\n",
    "Button(ws, text=\"Start Pose\", borderwidth=3, relief=\"flat\", padx=5, pady=10).pack(padx=5, pady=10)\n",
    "Button(ws, text=\"raised border\", borderwidth=3, relief=\"raised\", padx=5, pady=10).pack(padx=5, pady=10)\n",
    "Button(ws, text=\"sunken border\", borderwidth=3, relief=\"sunken\", padx=5, pady=10).pack(padx=5, pady=10)\n",
    "Button(ws, text=\"ridge border\", borderwidth=3, relief=\"ridge\", padx=5, pady=10).pack(padx=5, pady=10)\n",
    "Button(ws, text=\"solid border\", borderwidth=3, relief=\"solid\", padx=5, pady=10).pack(padx=5, pady=10)\n",
    "Button(ws, text=\"groove border\", borderwidth=3, relief=\"groove\",padx=5, pady=10).pack(padx=5, pady=10)\n",
    "Button(ws, text=\"Height & width\", height=5, width=10).pack()\n",
    "\n",
    "ws.mainloop()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "import tkinter as tk\n",
    "from tkinter import ttk\n",
    "  \n",
    " \n",
    "LARGEFONT =(\"Verdana\", 30)\n",
    "  \n",
    "class tkinterApp(tk.Tk):\n",
    "     \n",
    "    # __init__ function for class tkinterApp\n",
    "    def __init__(self, *args, **kwargs):\n",
    "         \n",
    "        # __init__ function for class Tk\n",
    "        tk.Tk.__init__(self, *args, **kwargs)\n",
    "         \n",
    "        # creating a container\n",
    "        container = tk.Frame(self) \n",
    "        container.pack(side = \"top\", fill = \"both\", expand = True)\n",
    "  \n",
    "        container.grid_rowconfigure(0, weight = 1)\n",
    "        container.grid_columnconfigure(0, weight = 1)\n",
    "  \n",
    "        # initializing frames to an empty array\n",
    "        self.frames = {} \n",
    "  \n",
    "        # iterating through a tuple consisting\n",
    "        # of the different page layouts\n",
    "        for F in (StartPage, Page1, Page2):\n",
    "  \n",
    "            frame = F(container, self)\n",
    "  \n",
    "            # initializing frame of that object from\n",
    "            # startpage, page1, page2 respectively with\n",
    "            # for loop\n",
    "            self.frames[F] = frame\n",
    "  \n",
    "            frame.grid(row = 0, column = 0, sticky =\"nsew\")\n",
    "  \n",
    "        self.show_frame(StartPage)\n",
    "  \n",
    "    # to display the current frame passed as\n",
    "    # parameter\n",
    "    def show_frame(self, cont):\n",
    "        frame = self.frames[cont]\n",
    "        frame.tkraise()\n",
    "  \n",
    "# first window frame startpage\n",
    "  \n",
    "class StartPage(tk.Frame):\n",
    "    def __init__(self, parent, controller):\n",
    "        tk.Frame.__init__(self, parent)\n",
    "         \n",
    "        # label of frame Layout 2\n",
    "        label = ttk.Label(self, text =\"Startpage\", font = LARGEFONT)\n",
    "         \n",
    "        # putting the grid in its place by using\n",
    "        # grid\n",
    "        label.grid(row = 0, column = 4, padx = 10, pady = 10)\n",
    "  \n",
    "        button1 = ttk.Button(self, text =\"Page 1\",\n",
    "        command = lambda : controller.show_frame(Page1))\n",
    "     \n",
    "        # putting the button in its place by\n",
    "        # using grid\n",
    "        button1.grid(row = 1, column = 1, padx = 10, pady = 10)\n",
    "  \n",
    "        ## button to show frame 2 with text layout2\n",
    "        button2 = ttk.Button(self, text =\"Page 2\",\n",
    "        command = lambda : controller.show_frame(Page2))\n",
    "     \n",
    "        # putting the button in its place by\n",
    "        # using grid\n",
    "        button2.grid(row = 2, column = 1, padx = 10, pady = 10)\n",
    "  \n",
    "          \n",
    "  \n",
    "  \n",
    "# second window frame page1\n",
    "class Page1(tk.Frame):\n",
    "     \n",
    "    def __init__(self, parent, controller):\n",
    "         \n",
    "        tk.Frame.__init__(self, parent)\n",
    "        label = ttk.Label(self, text =\"Page 1\", font = LARGEFONT)\n",
    "        label.grid(row = 0, column = 4, padx = 10, pady = 10)\n",
    "  \n",
    "        # button to show frame 2 with text\n",
    "        # layout2\n",
    "        button1 = ttk.Button(self, text =\"StartPage\",\n",
    "                            command = lambda : controller.show_frame(StartPage))\n",
    "     \n",
    "        # putting the button in its place\n",
    "        # by using grid\n",
    "        button1.grid(row = 1, column = 1, padx = 10, pady = 10)\n",
    "  \n",
    "        # button to show frame 2 with text\n",
    "        # layout2\n",
    "        button2 = ttk.Button(self, text =\"Page 2\",\n",
    "                            command = lambda : controller.show_frame(Page2))\n",
    "     \n",
    "        # putting the button in its place by\n",
    "        # using grid\n",
    "        button2.grid(row = 2, column = 1, padx = 10, pady = 10)\n",
    "  \n",
    "  \n",
    "  \n",
    "  \n",
    "# third window frame page2\n",
    "class Page2(tk.Frame):\n",
    "    def __init__(self, parent, controller):\n",
    "        tk.Frame.__init__(self, parent)\n",
    "        label = ttk.Label(self, text =\"Page 2\", font = LARGEFONT)\n",
    "        label.grid(row = 0, column = 4, padx = 10, pady = 10)\n",
    "  \n",
    "        # button to show frame 2 with text\n",
    "        # layout2\n",
    "        button1 = ttk.Button(self, text =\"Page 1\",\n",
    "                            command = lambda : controller.show_frame(Page1))\n",
    "     \n",
    "        # putting the button in its place by\n",
    "        # using grid\n",
    "        button1.grid(row = 1, column = 1, padx = 10, pady = 10)\n",
    "  \n",
    "        # button to show frame 3 with text\n",
    "        # layout3\n",
    "        button2 = ttk.Button(self, text =\"Startpage\",\n",
    "                            command = lambda : controller.show_frame(StartPage))\n",
    "     \n",
    "        # putting the button in its place by\n",
    "        # using grid\n",
    "        button2.grid(row = 2, column = 1, padx = 10, pady = 10)\n",
    "  \n",
    "  \n",
    "# Driver Code\n",
    "app = tkinterApp()\n",
    "app.mainloop()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import the required libraries\n",
    "from tkinter import *\n",
    "from tkinter import font\n",
    "\n",
    "# Create an instance of tkinter frame or window\n",
    "win = Tk()\n",
    "win.title(\"Perfect pose likes a model\")\n",
    "\n",
    "\n",
    "# Set the size of the window\n",
    "win.geometry(\"1024x768\")\n",
    "\n",
    "# Create two frames in the window\n",
    "greet = Frame(win)\n",
    "order = Frame(win)\n",
    "\n",
    "# Define a function for switching the frames\n",
    "def change_to_greet():\n",
    "   greet.pack(fill='both', expand=1)\n",
    "   order.pack_forget()\n",
    "\n",
    "def change_to_order():\n",
    "   order.pack(fill='both', expand=1)\n",
    "   greet.pack_forget()\n",
    "    \n",
    "#Add a text in Canvas\n",
    "\n",
    "tk.Label(text = \"Perfect pose likes a model \", borderwidth=5, relief=\"flat\", font=(\"arial italic\", 30)).place(x=70,y=90)\n",
    "\n",
    "\n",
    "\n",
    "# Create fonts for making difference in the frame\n",
    "font1 = font.Font(family='Georgia', size='22', weight='bold')\n",
    "font2 = font.Font(family='Aerial', size='12')\n",
    "\n",
    "# Add a heading logo in the frames\n",
    "label1 = Label(greet, text=\"Hey There! Welcome to TutorialsPoint.\", foreground=\"green3\", font=font1)\n",
    "label1.pack(pady=20)\n",
    "\n",
    "label2 = Label(order, text=\"Find all the interesting Tutorials.\", foreground=\"blue\", font=font2)\n",
    "label2.pack(pady=20)\n",
    "\n",
    "# Add a button to switch between two frames\n",
    "btn1 = Button(win, text=\"Switch to Greet\", font=font2, command=change_to_order)\n",
    "btn1.pack(pady=20)\n",
    "\n",
    "btn2 = Button(win, text=\"Switch to Order\", font=font2, command=change_to_greet)\n",
    "btn2.pack(pady=20)\n",
    "\n",
    "win.mainloop()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "from tkinter import *\n",
    "\n",
    "ws = Tk()\n",
    "ws.title(\"Border\")\n",
    "ws.geometry(\"800x600\")\n",
    "\n",
    "# Button(ws, text=\"Height & width\", height=5, width=10).pack()\n",
    "\n",
    "Button(ws, text=\"Start Pose\", borderwidth=3, relief=\"flat\", padx=5, pady=10).pack(padx=5, pady=10)\n",
    "Button(ws, text=\"raised border\", borderwidth=3, relief=\"raised\", padx=5, pady=10).pack(padx=5, pady=10)\n",
    "Button(ws, text=\"sunken border\", borderwidth=3, relief=\"sunken\", padx=5, pady=10).pack(padx=5, pady=10)\n",
    "Button(ws, text=\"ridge border\", borderwidth=3, relief=\"ridge\", padx=5, pady=10).pack(padx=5, pady=10)\n",
    "Button(ws, text=\"solid border\", borderwidth=3, relief=\"solid\", padx=5, pady=10).pack(padx=5, pady=10)\n",
    "Button(ws, text=\"groove border\", borderwidth=3, relief=\"groove\",padx=5, pady=10).pack(padx=5, pady=10)\n",
    "# Button(ws, text=\"Height & width\", height=5, width=10).pack()\n",
    "\n",
    "ws.mainloop()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Button is clicked!\n"
     ]
    }
   ],
   "source": [
    "import tkinter as tk\n",
    "screen = tk.Tk()\n",
    "#Screen size\n",
    "screen.geometry('300x300')\n",
    "#Define Function for Button\n",
    "def alert():\n",
    "   print(\"Button is clicked!\")\n",
    "#Button\n",
    "button_tk = tk.Button(screen, text=\"Hello\", command=alert) \n",
    "button_tk.pack(side='top')\n",
    "screen.mainloop()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
